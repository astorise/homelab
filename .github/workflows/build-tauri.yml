name: Build Tauri

on:
  push:
    branches-ignore: ['codex/*']
  workflow_dispatch:

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - run: docker build -t env-dev-image -f docker-image/Dockerfile .
      - run: |
          cid=$(docker create env-dev-image)
          docker export "$cid" -o env-dev-image.tar
          docker rm "$cid"
      - uses: actions/upload-artifact@v4
        with:
          name: env-dev-image.tar
          path: env-dev-image.tar
  build-services:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install mingw for Windows cross-compile
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-gnu

      - name: Cache Rust (workspace)
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: services-x86_64-pc-windows-gnu
          cache-on-failure: true

      - name: Build services (Windows gnu)
        env:
          RUSTFLAGS: "-C target-feature=+crt-static"
        run: |
          cargo build -p home-dns   --release --target x86_64-pc-windows-gnu
          cargo build -p home-proxy --release --target x86_64-pc-windows-gnu
          ls -lah target/x86_64-pc-windows-gnu/release
          mkdir -p services-win
          cp target/x86_64-pc-windows-gnu/release/home-dns.exe   services-win/
          cp target/x86_64-pc-windows-gnu/release/home-proxy.exe services-win/

      - name: Upload services artifacts
        uses: actions/upload-artifact@v4
        with:
          name: services-win
          path: services-win/*

  # === OPTION RECOMMANDÃ‰E: installateur Windows officiel (runner Windows) ===
  build-tauri-win:
    runs-on: windows-latest
    needs: [build-services, build-docker-image]
    steps:
      - uses: actions/checkout@v5

      - name: Download services artifacts into Tauri bin
        uses: actions/download-artifact@v5
        with:
          name: services-win
          path: home-lab/src-tauri/bin

      - name: Download Docker image into Tauri resources
        uses: actions/download-artifact@v5
        with:
          name: env-dev-image.tar
          path: home-lab/src-tauri/resources

      - name: Rename Docker image
        run: mv home-lab/src-tauri/resources/env-dev-image.tar home-lab/src-tauri/resources/homelab-img.tar

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install frontend deps + Tauri CLI
        working-directory: home-lab
        shell: pwsh
        run: |
          if (Test-Path package-lock.json) { npm ci } else { npm install }
          $hasCli = (npm pkg get devDependencies.'@tauri-apps/cli' | Select-String -Quiet '@tauri-apps/cli')
          if (-not $hasCli) { npm i -D @tauri-apps/cli@latest }
          npx tauri -V

      # Optionnel : cache npm
      - name: Enable npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('home-lab/**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Build Tauri (Windows - NSIS + MSI)
        uses: tauri-apps/tauri-action@v0.5.22
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_BUNDLE_DEBUG: "true"
          TAURI_BUNDLE_TARGETS: "nsis,msi"
        with:
          projectPath: ./home-lab

      - name: Upload NSIS setup
        uses: actions/upload-artifact@v4
        with:
          name: nsis-setup
          path: target/release/bundle/nsis/*.exe
          if-no-files-found: error

      - name: Upload MSI package
        uses: actions/upload-artifact@v4
        with:
          name: msi-package
          path: target/release/bundle/msi/*.msi
          if-no-files-found: error
